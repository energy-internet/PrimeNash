{
    "game_setting": {
        "description": "Assume you are a game theory expert. You are tasked with carefully solving the following Stackelberg game problem step by step.\n\nIn this market environment, there are two firms producing homogeneous goods in a sequential game:\n1. Firm 1 is the leader who moves first\n2. Firm 2 is the follower who moves second and observes Firm 1's quantity choice\n\nGame Structure:\n1. Leader (Firm 1) chooses quantity q1 first\n2. Follower (Firm 2) observes q1 and then chooses q2\n3. Market price is determined by P = 8 - (q1 + q2)\n4. Both firms have constant marginal cost c\n5. Profit functions:\n   - Leader: U1(q1, q2) = P*q1 - c*q1\n   - Follower: U2(q2, q1) = P*q2 - c*q2\n\nTask:\nUsing backward induction, derive the Subgame Perfect Nash Equilibrium quantities for both firms. Express your answer in terms of market parameter c.\nFormat your response as:\n'Leader quantity': 'xx'\n'Follower quantity': 'xx'"
    },
    "evaluation": {
        "template": "Assume you are a game theory expert. Please evaluate the following response based on:\n1. Correct application of backward induction\n2. Mathematical accuracy\n3. Strategic understanding of sequential moves\n\nScore range: 0-10 (where 10 indicates perfect application of backward induction and high mathematical accuracy)\nPoints will be deducted if quantities are not expressed in terms of parameter c.\n\nResponse: {response}\n\nPlease provide your final score in the following format: 'score': 'xx'."
    },
    "sr": {
        "template": "In this Stackelberg duopoly market:\n\n1. Leader (Firm 1) moves first, choosing quantity q1\n2. Follower (Firm 2) observes q1 and then chooses q2\n3. Market price: P = 8 - (q1 + q2)\n4. Constant marginal cost c for both firms\n5. Profit functions:\n   - Leader: U1(q1, q2) = P*q1 - c*q1\n   - Follower: U2(q2, q1) = P*q2 - c*q2\n\nBased on the following high-quality responses, you need to:\n\n1. First, provide the Subgame Perfect Nash Equilibrium expressions in this exact format:\n'Leader equilibrium quantity': 'xx'\n'Follower equilibrium quantity': 'xx'\n\n2. Then, you MUST provide a complete Python implementation that:\n   a. Uses sympy for symbolic mathematics\n   b. Implements backward induction\n   c. Shows step-by-step derivation process\n   d. Solves for both firms' equilibrium quantities\n   e. Includes all necessary imports\n   f. Is directly executable\n\nYour code MUST be provided in this exact format:\n'The complete code for solving the Stackelberg equilibrium expressions':\n```python\nimport sympy as sp\n\n# Your implementation here\n# Must show backward induction steps\n# Must use symbolic mathematics\n```\n\nNote: The code section is REQUIRED and must be complete and executable."
    },
    "verification": {
        "start": "Assume you are a game theory expert needing to verify a Subgame Perfect Nash Equilibrium. Follow these steps:\n\n1. Backward Induction:\n   - Start with follower's best response function\n   - Substitute into leader's profit function\n   - Verify leader's optimal quantity\n   - Verify follower's optimal quantity\n\n2. Check optimality:\n   - Verify first-order conditions\n   - Check second-order conditions\n   - Ensure quantities are non-negative\n\n3. Validate solution:\n   - Substitute quantities into profit functions\n   - Verify no profitable deviations\n\nGame Settings:\n",
        "middle": "\nSolution: ",
        "end": "\nWrite code to verify this is a Subgame Perfect Nash Equilibrium. The code must:\n1. Use sympy for symbolic mathematics\n2. Implement backward induction\n3. Check optimality conditions\n4. Store result in is_spne (True/False)\n\nOutput only the executable Python code, no explanations."
    }
}