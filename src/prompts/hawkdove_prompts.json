{
    "game_setting": {
        "description": "Assume you are a game theory expert. You are tasked with carefully solving the following game problem step by step.\n\nThere are 2 players: Player 1 and Player 2.\nEach player has a set of strategies:\n- Player 1: [\"Wolf\", \"Rabbit\"]\n- Player 2: [\"Wolf\", \"Rabbit\"]\n\nThe payoffs depend on the strategies chosen by each player.\n- If Player 1 chooses \"Wolf\" and Player 2 chooses \"Rabbit\", the payoffs are (u_1, u_2) = (20, 0).\n- If Player 1 chooses \"Rabbit\" and Player 2 chooses \"Wolf\", the payoffs are (u_1, u_2) = (0, 20).\n- If both Player 1 and Player 2 choose \"Wolf\", the payoffs are (u_1, u_2) = (-20, -20).\n- If both Player 1 and Player 2 choose \"Rabbit\", the payoffs are (u_1, u_2) = (10, 10).\n\nThe rules of the game constrain how the players interact:\n1. Player 1 and Player 2 must simultaneously choose either \"Wolf\" or \"Rabbit\".\n2. There is no cooperation between the players.\n3. Each player seeks to maximize their own payoff.\n\nTask:\nFind the mixed strategy Nash equilibrium.\nFormat your response as:\n'Probability': 'xx'"
    },
    "evaluation": {
        "template": "Assume you are a game theory expert. Please evaluate the following response based on:\n1. Correct application of mixed strategy analysis\n2. Mathematical accuracy\n3. Strategic understanding of the Hawk-Dove game\n\nScore range: 0-10 (where 10 indicates perfect understanding and high mathematical accuracy)\nPoints will be deducted if probabilities are not expressed in terms of parameters V and C.\n\nResponse: {response}\n\nPlease provide your final score in the following format: 'score': 'xx'."
    },
    "sr": {
        "template": "In this Wolf-Rabbit game:\n\nThere are 2 players: Player 1 and Player 2.\nEach player has a set of strategies:\n- Player 1: [\"Wolf\", \"Rabbit\"]\n- Player 2: [\"Wolf\", \"Rabbit\"]\n\nThe payoffs depend on the strategies chosen by each player.\n- If Player 1 chooses \"Wolf\" and Player 2 chooses \"Rabbit\", the payoffs are (u_1, u_2) = (20, 0).\n- If Player 1 chooses \"Rabbit\" and Player 2 chooses \"Wolf\", the payoffs are (u_1, u_2) = (0, 20).\n- If both Player 1 and Player 2 choose \"Wolf\", the payoffs are (u_1, u_2) = (-20, -20).\n- If both Player 1 and Player 2 choose \"Rabbit\", the payoffs are (u_1, u_2) = (10, 10).\n\nThe rules of the game constrain how the players interact:\n1. Player 1 and Player 2 must simultaneously choose either \"Wolf\" or \"Rabbit\".\n2. There is no cooperation between the players.\n3. Each player seeks to maximize their own payoff.\n\nBased on the following high-quality responses, you need to:\n\n1. First, provide the mixed strategy Nash equilibrium in this exact format:\n'Probability': 'xx'\n\n2. Then, you MUST provide a complete Python implementation that:\n   a. Uses sympy for symbolic mathematics\n   b. Shows step-by-step derivation process\n   c. Calculates expected payoffs\n   d. Solves for the equilibrium probability\n   e. Includes all necessary imports\n   f. Is directly executable\n\nYour code MUST be provided in this exact format:\n```python\nimport sympy as sp\n\n# Your implementation here\n# Must show each step clearly\n# Must use symbolic mathematics\n```"
    },
    "verification": {
        "start": "Assume you are an economist needing to verify a mixed strategy Nash equilibrium. Follow these steps:\n\n1. Calculate expected payoffs:\n   - For each pure strategy, calculate the expected payoff given opponent's mixed strategy\n   - Verify that the expected payoffs are equal when both strategies are played with positive probability\n\n2. Check optimality:\n   - Verify that no player can improve their payoff by deviating\n   - Ensure probabilities sum to 1 and are non-negative\n\n3. Validate solution:\n   - Substitute the proposed probabilities into the expected payoff calculations\n   - Verify that the indifference condition holds\n\nGame Settings:\n",
        "middle": "\nSolution: ",
        "end": "\nWrite code to verify this is a mixed strategy Nash equilibrium. The code must:\n1. Use sympy for symbolic mathematics\n2. Calculate expected payoffs\n3. Check indifference conditions\n4. Store result in is_nash_equilibrium (True/False)\n\nOutput only the executable Python code, no explanations."
    }
}